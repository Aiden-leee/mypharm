<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.prj.mypharm.mapper.PharmMapper">

	<!-- // 약국 목록
	ArrayList<PharmVO> selectPharm(int pageNo, int numberPerPage) throws SQLException;-->
	<select id="selectAllPharm" resultType="com.prj.mypharm.pharmacy.domain.PharmDTO">
		 <![CDATA[
		SELECT /*+INDEX_ASC(pharmacy PHARM_INDEX)*/ *
		FROM pharmacy
		WHERE rnum > 0
		]]>
	</select>	

	<!-- ArrayList<PharmDTO> getBoundPharmList(double lat, double lng) throws SQLException -->
	<!-- 		// 1/111은 지구의 경도 또는 위도 1도에 해당하는 거리를 의미
			// 지구의 둘레는 총 360도이며, 경도와 위도는 각각 지구를 동서 및 남북으로 나누는 선들을 나타냄 -->
	<select id="getBoundPharmList" resultType="com.prj.mypharm.pharmacy.domain.PharmDTO">
		<![CDATA[
			WITH pharm_distance AS (
			    SELECT @ROWNUM := @ROWNUM+1 as rownum, RNUM, DUTYADDR, DUTYNAME, DUTYETC, DUTYTEL1, DUTYTIME1S, DUTYTIME1C, DUTYTIME2S,
			        DUTYTIME2C, DUTYTIME3S, DUTYTIME3C, DUTYTIME4S, DUTYTIME4C, DUTYTIME5S, DUTYTIME5C,
			        DUTYTIME6S, DUTYTIME6C, DUTYTIME7S, DUTYTIME7C, DUTYTIME8S, DUTYTIME8C, HPID, POSTCDN1,
			        POSTCDN2, WGS84LAT, WGS84LON,
			         (6371 * acos ( 
			                    cos ( radians(#{lat}) ) * cos( radians( WGS84LAT ) ) * cos( radians( WGS84LON ) - radians(#{lng}) )
			                    + sin ( radians(#{lat} ) ) * sin( radians( WGS84LAT ) )
			        )) distance
			    FROM pharmacy
			    WHERE  WGS84LAT BETWEEN #{lat} - 1/111 AND #{lat} + 1/111
			        AND WGS84LON BETWEEN #{lng} - 1/111 AND #{lng} + 1/111
			    ORDER BY rnum
			)
			SELECT *
			FROM pharm_distance
			WHERE distance <= 2
			ORDER BY distance
		]]>
	</select>
	
	<!-- // 동네 약국 조회 
	ArrayList<PharmDTO> getDongPharmList(String si, String gu, String dong, int pageNo, int numberPerPage) -->
	<select id="getDongPharmList" resultType="com.prj.mypharm.pharmacy.domain.PharmDTO">
		SELECT *
		FROM pharmacy
		<choose>
			<when test="param2 == '특별자치'">
				WHERE REGEXP_LIKE (dutyaddr, '${param1}')
			</when>
			<otherwise>
				WHERE REGEXP_LIKE (dutyaddr, '${param1} ${param2}')
			</otherwise>
		</choose>
		AND REGEXP_LIKE (dutyaddr, '${param3}')
	</select>
    
</mapper>

